name: CI/CD Pipeline

on:
  push:
    branches: ["main"]

jobs:
  aws_instance_prep:
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.set_env.outputs.instance_id }}
      public_ip: ${{ steps.get_ip.outputs.public_ip }}
    steps:
      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: Check for existing EC2 instance
        id: check_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=kiii-main" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" --output text)
          if [[ "$INSTANCE_ID" == "None" ]]; then
            echo "EXISTING_INSTANCE=false" >> $GITHUB_ENV
          else
            echo "EXISTING_INSTANCE=true" >> $GITHUB_ENV
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          fi

      - name: Launch EC2 Instance if needed
        if: env.EXISTING_INSTANCE == 'false'
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --launch-template LaunchTemplateId=${{ secrets.EC2_LAUNCH_TEMPLATE_ID }} \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=kiii-main}]" \
            --query 'Instances[0].InstanceId' --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for instance to be ready
        run: |
          aws ec2 wait instance-status-ok --instance-ids ${{ env.INSTANCE_ID }}

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Set instance ID output
        id: set_env
        run: echo "instance_id=${{ env.INSTANCE_ID }}" >> $GITHUB_OUTPUT

  docker:
    runs-on: ubuntu-latest
    needs: aws_instance_prep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate frontend config.js with EC2 IP
        run: |
          sed "s|__API_URL__|http://${{ needs.aws_instance_prep.outputs.public_ip }}:8000|g" frontend/config.template.js > frontend/config.js

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: gorjanbogoevski/recipenest-backend:v1

      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: gorjanbogoevski/recipenest-frontend:v1

  deploy:
    runs-on: ubuntu-latest
    needs: [aws_instance_prep, docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Copy docker-compose.yml to EC2
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no docker-compose.yml \
            ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }}:/home/ec2-user/docker-compose.yml

      - name: Deploy with docker-compose
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }} << 'EOF'
            docker-compose pull
            docker-compose down || true
            docker-compose up -d
          EOF
